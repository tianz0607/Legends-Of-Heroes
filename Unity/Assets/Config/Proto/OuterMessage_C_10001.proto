syntax = "proto3";
package ET;

message HttpGetRouterResponse
{
	repeated string Realms = 1;
	repeated string Routers = 2;
}

message RouterSync
{
	uint32 ConnectId = 1;
	string Address = 2;
}

//ResponseType M2C_TestResponse
message C2M_TestRequest // IActorLocationRequest
{
	int32 RpcId = 1;
	string request = 2;
}

message M2C_TestResponse // IActorResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	string response = 4;
}

//ResponseType Actor_TransferResponse
message Actor_TransferRequest // IActorLocationRequest
{
	int32 RpcId = 1;
	int32 MapIndex = 2;
}

message Actor_TransferResponse // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2C_EnterMap
message C2G_EnterMap // IRequest
{
	int32 RpcId = 1;
}

message G2C_EnterMap // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	// 自己unitId
	int64 MyId = 4;
}

message MoveInfo
{
	repeated Unity.Mathematics.float3 Points = 1;
	Unity.Mathematics.quaternion Rotation = 2;
	int32 TurnSpeed = 3;
}

message UnitInfo
{
	int64 UnitId = 1;
	int32 ConfigId = 2;
	int32 Type = 3;
	Unity.Mathematics.float3 Position = 4;
	Unity.Mathematics.float3 Forward = 5;
	map<int32, int64> KV = 6;
	MoveInfo MoveInfo = 7;
	int64 OwnerId = 8;
	map<int32, int32> Skills = 9; //技能
}

message M2C_CreateUnits // IActorMessage
{
	repeated UnitInfo Units = 1;
}

message M2C_CreateMyUnit // IActorMessage
{
	UnitInfo Unit = 1;
}

message M2C_StartSceneChange // IActorMessage
{
	int64 SceneInstanceId = 1;
	string SceneName = 2;	
}

message M2C_RemoveUnits // IActorMessage
{
	repeated int64 Units = 1;
}

message C2M_PathfindingResult // IActorLocationMessage
{
	int32 RpcId = 1;
	Unity.Mathematics.float3 Position = 2;
}

message C2M_Stop // IActorLocationMessage
{
	int32 RpcId = 1;
}

message M2C_PathfindingResult // IActorMessage
{
	int64 Id = 1;
	Unity.Mathematics.float3 Position = 2;
	repeated Unity.Mathematics.float3 Points = 3;
}

message M2C_Stop // IActorMessage
{
	int32 Error = 1;
	int64 Id = 2;
	Unity.Mathematics.float3 Position = 3;
	Unity.Mathematics.quaternion Rotation = 4;
}

//ResponseType G2C_Ping
message C2G_Ping // IRequest
{
	int32 RpcId = 1;
}

message G2C_Ping // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int64 Time = 4;
}


message G2C_Test // IMessage
{
}

//ResponseType M2C_Reload
message C2M_Reload // IRequest
{
	int32 RpcId = 1;
	string Account = 2;
	string Password = 3;
}

message M2C_Reload // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType R2C_Login
message C2R_Login // IRequest
{
	int32 RpcId = 1;
	string  Account = 2;  // 帐号
	string  Password = 3;  // 密码
}

message R2C_Login // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	string Address = 4;
	int64 Key = 5;
	int64 GateId = 6;
}

//ResponseType G2C_LoginGate
message C2G_LoginGate // IRequest
{
	int32 RpcId = 1;
	int64 Key = 2;  // 帐号
	int64 GateId = 3;
}

message G2C_LoginGate // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int64 PlayerId = 4;
	string LobbyAddress = 5;
	string PlayerName = 6;
	int AvatarIndex = 7;
	long LobbyActorId = 8;
}

message G2C_TestHotfixMessage // IMessage
{
	string Info = 1;
}

//ResponseType M2C_TestRobotCase
message C2M_TestRobotCase // IActorLocationRequest
{
	int32 RpcId = 1;
	int32 N = 2;
}

message M2C_TestRobotCase // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	int32 N = 4;
}

message C2M_TestRobotCase2 // IActorLocationMessage
{
	int32 RpcId = 1;
	int32 N = 2;
}

message M2C_TestRobotCase2 // IActorLocationMessage
{
	int32 RpcId = 1;
	int32 N = 2;
}

//ResponseType M2C_TransferMap
message C2M_TransferMap // IActorLocationRequest
{
	int32 RpcId = 1;
}

message M2C_TransferMap // IActorLocationResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

//ResponseType G2C_Benchmark
message C2G_Benchmark // IRequest
{
	int32 RpcId = 1;
}

message G2C_Benchmark // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
}

///////////////////////////////// Map Start ///////////////////////////////////

//ResponseType M2C_JoystickMove
message C2M_JoystickMove // IActorLocationMessage
{
	int32 RpcId = 1;
	Unity.Mathematics.float3 MoveForward = 2;
}

message M2C_JoystickMove // IActorMessage
{
	int64 Id = 1;
	Unity.Mathematics.float3 Position = 2;
	Unity.Mathematics.float3 MoveForward = 3;
}


//ResponseType M2C_Operation
message C2M_Operation // IActorLocationMessage
{
	int32 RpcId = 1;
	int64 Id = 2;
	repeated OperateInfo OperateInfos = 3;
	
}

message M2C_Operation // IActorMessage
{
	int64 Id = 1;
	repeated OperateReplyInfo OperateInfos = 2;
}

message OperateInfo
{
    int32 OperateType = 1; //操作类型
    int32 InputType = 2; //输入类型，按下/抬起
	Unity.Mathematics.float3 Vec3 = 3; //v3参数
	int64 Value1 = 4;
	int64 Value2 = 5;
}
message OperateReplyInfo
{
    int32 OperateType = 1; //操作类型
	int32 Status = 2;
}

message M2C_SyncUnits // IActorMessage
{
	repeated UnitInfo Units = 1;
}


///////////////////////////////// Map End ///////////////////////////////////


///////////////////////////////// 房间相关  START ///////////////////////////////////



message C2L_JoinOrCreateRoom // IActorLocationMessage
{
    int32 RpcId = 1;
    int64 PlayerId = 2;  // 帐号
    int64 RoomId = 3; //加入的房间Id,传0的时候则寻找已有房间，>0则进入对应的房间。
}


message L2C_JoinOrCreateRoom // IActorMessage
{
    int32 RpcId = 1;
    int32 Error = 2;
    string Message = 3;
    RoomInfoProto roomInfo = 4;
}

//ResponseType G2C_JoinOrCreateRoom
message C2G_JoinOrCreateRoom // IRequest
{
    int32 RpcId = 1;
    int64 PlayerId = 2;  // 帐号
    int64 RoomId = 3; //加入的房间Id,传0的时候则寻找已有房间，>0则进入对应的房间。
	int32 PlayMode = 4;
}

message G2C_JoinOrCreateRoom // IResponse
{
    int32 RpcId = 1;
	int32 Error = 2;
    string Message = 3;
    RoomInfoProto roomInfo = 4;
	int32 PlayMode = 5;
}

message G2C_UpdateRoomPlayers // IActorMessage
{
    int32 RpcId = 1;
	int32 Error = 2;
    string Message = 3;
    RoomInfoProto roomInfo = 4;
	int32 PlayMode = 5;
}

message RoomInfoProto
{
    int64 RoomId = 1; //加入的房间Id
    int32 CampId = 2; //阵营，房间位置
    int64 RoomOwnerId = 3;
    string RoomName = 4;
    repeated PlayerInfoRoom playerInfoRoom = 5;
	int32 PlayMode = 6;
	bool IsReady = 7;//是否满人，满人开始倒计时进入战场
	
}

message PlayerInfoRoom
{
    string Account = 1;
    int64 UnitId = 2;
    int64 SessionId = 3;
    int64 RoomId = 4;
    int32 CampId = 5;
    int64 PlayerId = 6;
    string PlayerName = 7;
	int32 AvatarIndex = 8;
}

//ResponseType G2C_CreateNewRoom
message C2G_CreateNewRoom // IRequest
{
	int32 RpcId = 1;
	int64 PlayerId = 2;  // 帐号
	int32 PlayMode = 3;
}

message G2C_CreateNewRoom // IResponse
{
    int32 RpcId = 1;
    int32 Error = 2;
    string Message = 3;
    int32 RoomId = 4;
    int32 PlayMode = 5;
    int32 CampId = 6; //阵营，房间位置
}

message G2C_PlayerTriggerRoom // IActorMessage
{
    int32 RpcId = 1;
    int64 ActorId = 2;
    PlayerInfoRoom playerInfoRoom = 3;
    bool JoinOrLeave = 4;
}

//ResponseType G2C_LeaveRoom
message C2G_LeaveRoom // IRequest
{
    int32 RpcId = 1;
    int64 PlayerId = 2;  // 帐号
}

message G2C_LeaveRoom // IResponse
{
    int32 RpcId = 1;
    int32 Error = 2;
    string Message = 3;
    int32 CampId = 4; //阵营，房间位置
    int64 newRoomOwner = 5; //更换房主的时候选的新房主
    int64 RoomId = 6; // 离开的RoomId
    int64 PlayerId = 7;
    bool IsDestory = 8;
}

message PlayerBattleInfo
{
    int64 PlayerId = 1;
    int32 HeroConfig = 2;
}

message G2C_StartEnterMap // IActorMessage
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	// 自己unitId
	int64 MyId = 4;
}

//ResponseType G2C_StartGame
message C2G_StartGame // IRequest
{
    int32 RpcId = 1;
    int64 PlayerId = 2;  // 帐号
    repeated PlayerBattleInfo PlayerBattleInfos = 3;
}

message G2C_StartGame // IResponse
{
    int32 RpcId = 1;
    int32 Error = 2;
    string Message = 3;
    repeated int64 list = 4;
}

message PlayerBattlePoint
{
    int64 PlayerId = 1;
    int32 Point = 2;
    int32 SingleMatchCount = 3;
    string Account = 4;
    int64 UnitId = 5;
}

message G2C_PrepareToEnterBattle  // IMessage
{
}

message C2G_PreparedToEnterBattle // IMessage
{
    int64 PlayerId = 1;
}

message G2C_AllowToEnterMap // IMessage
{

}
///////////////////////////////// 房间相关  END ///////////////////////////////////

